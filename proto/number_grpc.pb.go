// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: number.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NumberClient is the client API for Number service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumberClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Number_SubscribeClient, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
}

type numberClient struct {
	cc grpc.ClientConnInterface
}

func NewNumberClient(cc grpc.ClientConnInterface) NumberClient {
	return &numberClient{cc}
}

func (c *numberClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Number_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Number_ServiceDesc.Streams[0], "/number.Number/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &numberSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Number_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type numberSubscribeClient struct {
	grpc.ClientStream
}

func (x *numberSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *numberClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, "/number.Number/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NumberServer is the server API for Number service.
// All implementations must embed UnimplementedNumberServer
// for forward compatibility
type NumberServer interface {
	Subscribe(*SubscribeRequest, Number_SubscribeServer) error
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
	mustEmbedUnimplementedNumberServer()
}

// UnimplementedNumberServer must be embedded to have forward compatible implementations.
type UnimplementedNumberServer struct {
}

func (UnimplementedNumberServer) Subscribe(*SubscribeRequest, Number_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedNumberServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedNumberServer) mustEmbedUnimplementedNumberServer() {}

// UnsafeNumberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumberServer will
// result in compilation errors.
type UnsafeNumberServer interface {
	mustEmbedUnimplementedNumberServer()
}

func RegisterNumberServer(s grpc.ServiceRegistrar, srv NumberServer) {
	s.RegisterService(&Number_ServiceDesc, srv)
}

func _Number_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NumberServer).Subscribe(m, &numberSubscribeServer{stream})
}

type Number_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type numberSubscribeServer struct {
	grpc.ServerStream
}

func (x *numberSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Number_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/number.Number/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Number_ServiceDesc is the grpc.ServiceDesc for Number service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Number_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "number.Number",
	HandlerType: (*NumberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unsubscribe",
			Handler:    _Number_Unsubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Number_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "number.proto",
}
